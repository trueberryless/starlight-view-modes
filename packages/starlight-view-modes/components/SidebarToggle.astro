<style is:global>
  :root {
    --tablet-navbar-inset-inline-start: 50px;
  }
  .right-sidebar {
    width: auto !important;
  }

  .main-pane {
    flex: 1 0 78%;
  }

  .sl-container{
    width: 100%;
    max-width: none;
  }



  body.view-modes-zen-mode.view-modes-zen-mode-sidebar-disabled.view-modes-zen-mode-table-of-contents-enabled.view-modes-zen-mode-template-doc
    main {
    width: 100%;
  }

  body.view-modes-zen-mode.view-modes-zen-mode-sidebar-disabled.view-modes-zen-mode-table-of-contents-enabled.view-modes-zen-mode-template-doc
    .main-frame {
    padding-inline-start: 0px !important;
    padding: 0;
  }

  @media (min-width: 50rem) {
    nav:where(.astro-doynk5tl) {
      inset-inline-start: var(--tablet-navbar-inset-inline-start);
    }
  }
</style>

<script>
  import config from "virtual:starlight-view-modes-config";

  let documentQuerySelector = (selector) => {
    return document.querySelector(selector) as HTMLElement;
  };
  let documentQuerySelectorAll = (selector) => {
    return Array.from(
      document.querySelectorAll(selector)
    ) as Array<HTMLElement>;
  };

  let toggleMainSideBarBtn = documentQuerySelector(".toggle-main-side-bar-btn");
  let toggleRightSideBarBtn = documentQuerySelector(
    ".toggle-right-side-bar-btn"
  );

  if (config.leftSidebarEnabled === false) {
    toggleMainSideBarBtn.style.display = "none";
  }
  if (config.rightSidebarEnabled === false) {
    toggleRightSideBarBtn.style.display = "none";
  }

  function configureMainSideBar() {
    let mainSidebarContainer = documentQuerySelector(".sidebar-pane");
    let navBar = mainSidebarContainer.querySelector(
      "ul.top-level"
    ) as HTMLElement;
    let mainFrame = documentQuerySelector(".main-frame");
    let body = documentQuerySelector("body");

    const toggleMainSideBar = (isMainSideBarCollapsed?) => {
      // @ts-ignore
      if (isMainSideBarCollapsed instanceof Event) {
        isMainSideBarCollapsed =
          sessionStorage.getItem("mainSideBarCollapsed") === "true";
      }
      if (!isMainSideBarCollapsed) {
        mainSidebarContainer.classList.add("sidebar-pane-collapsed");
        mainSidebarContainer.style.width = "50px";
        document.documentElement.style.setProperty(
          "--tablet-navbar-inset-inline-start",
          "50px"
        );
        mainSidebarContainer.style.overflow = "hidden";
        navBar.style.opacity = "0";
        mainFrame.style.paddingInlineStart = mainSidebarContainer.style.width;
        body.classList.add("main-side-bar-collapsed");
      } else {
        mainSidebarContainer.classList.remove("sidebar-pane-collapsed");
        mainSidebarContainer.style.width = "";
        document.documentElement.style.setProperty(
          "--tablet-navbar-inset-inline-start",
          getComputedStyle(mainSidebarContainer).getPropertyValue("width")
        );
        mainSidebarContainer.style.overflow = "";
        navBar.style.opacity = "";
        mainFrame.style.paddingInlineStart = "";
        body.classList.remove("main-side-bar-collapsed");
      }
      sessionStorage.setItem(
        "mainSideBarCollapsed",
        isMainSideBarCollapsed ? "false" : "true"
      );
    };

    // @ts-ignore
    toggleMainSideBarBtn.addEventListener("click", toggleMainSideBar);
    let isMainSideBarCollapsed =
      sessionStorage.getItem("mainSideBarCollapsed") === "true";
    toggleMainSideBar(!isMainSideBarCollapsed);
  }

  function configureRightSideBar() {
    let rightSideBar = documentQuerySelector(".right-sidebar");
    rightSideBar.style.width = "auto";
    let rightSidebarContainer = documentQuerySelector(
      ".right-sidebar-container"
    );
    let navBar = rightSidebarContainer.querySelectorAll("nav")[1];
    let viewModesActivationNav = documentQuerySelector("nav#view-modes-activation")
    let body = documentQuerySelector("body");

    const toggleRightSideBar = (isRightSideBarCollapsed?) => {
      // @ts-ignore
      if (isRightSideBarCollapsed instanceof Event) {
        isRightSideBarCollapsed =
          sessionStorage.getItem("rightSideBarCollapsed") === "true";
      }
      if (!isRightSideBarCollapsed) {
        rightSidebarContainer.style.width = "50px";
        rightSideBar.style.overflow = "hidden";
        [viewModesActivationNav, navBar].forEach((element) => {
          element.style.opacity = "0";
        })
        body.classList.add("right-side-bar-collapsed");
      } else {
        rightSidebarContainer.style.width = "";
        rightSideBar.style.overflow = "";
        [viewModesActivationNav, navBar].forEach((element) => {
          element.style.opacity = "1";
        })
        body.classList.remove("right-side-bar-collapsed");
      }
      sessionStorage.setItem(
        "rightSideBarCollapsed",
        isRightSideBarCollapsed ? "false" : "true"
      );
    };

    // @ts-ignore
    toggleRightSideBarBtn.addEventListener("click", toggleRightSideBar);
    let isRightSideBarCollapsed =
      sessionStorage.getItem("rightSideBarCollapsed") === "true";
    toggleRightSideBar(!isRightSideBarCollapsed);
  }

  document.addEventListener("DOMContentLoaded", () => {
    if (config.leftSidebarEnabled) configureMainSideBar();
    if (config.rightSidebarEnabled) configureRightSideBar();
  });
</script>
